import pandas as pd
import geometric_asian_basket as geo
import arithmetic_asian_mc as asian_mc
import arithmetic_basket_mc as basket_mc
import binomial_tree_american as american

if __name__ == '__main__':
    S = 100
    T = 3
    r = 0.05
    m = 100000
    rho = 0.5

    print('-------------------------------Test 1: Asian Options --------------------------------------')
    tests = [[0.3, 100, 50, 'P'],
             [0.3, 100, 100, 'P'],
             [0.4, 100, 50, 'P'],
             [0.3, 100, 50, 'C'],
             [0.3, 100, 100, 'C'],
             [0.4, 100, 50, 'C']
             ]
    for i in range(len(tests)):
        geo_asian = geo.geometric_asian_option(S=S, sigma=tests[i][0], r=r, T=T, K=tests[i][1], n=tests[i][2], \
                                               option_type=tests[i][3])
        tests[i].append(geo_asian)
        a, b, c = asian_mc.arithmatic_asian_option(S=S, sigma=tests[i][0], r=r, T=T, K=tests[i][1], n=tests[i][2],\
                                                        option_type=tests[i][3], m=m, control_method='geo')
        tests[i].extend([a, b, c])
        a, b, c = asian_mc.arithmatic_asian_option(S=S, sigma=tests[i][0], r=r, T=T, \
                                                        K=tests[i][1], n=tests[i][2], option_type=tests[i][3], m=m, \
                                                        control_method='arith')
        tests[i].extend([a, b, c])
        a, b, c = asian_mc.arithmatic_asian_option(S=S, sigma=tests[i][0], r=r, T=T, \
                                                        K=tests[i][1], n=tests[i][2], option_type=tests[i][3], m=m, \
                                                        control_method='control')
        tests[i].extend([a, b, c])
    df = pd.DataFrame(tests, columns=['sigma', 'K', 'n', 'Type', 'geo_closed_form', 'geo_mc', 'geo_mc_l', 'geo_mc_u', \
                                      'arith_mc', 'arith_mc_l', 'arith_mc_u', 'mc_control', 'mc_control_l', 'mc_control_u'])
    print(tests)
    print(df)
    df.to_csv('./tests_asian.csv', index=False)

    print('-------------------------------Test 2: Basket Options --------------------------------------')
    tests_b = [[100, 100, 100, 0.3, 0.3, 0.5, 'P'],
               [100, 100, 100, 0.3, 0.3, 0.9, 'P'],
               [100, 100, 100, 0.1, 0.3, 0.5, 'P'],
               [100, 100, 80, 0.3, 0.3, 0.5, 'P'],
               [100, 100, 120, 0.3, 0.3, 0.5, 'P'],
               [100, 100, 100, 0.5, 0.5, 0.5, 'P'],
               [100, 100, 100, 0.3, 0.3, 0.5, 'C'],
               [100, 100, 100, 0.3, 0.3, 0.9, 'C'],
               [100, 100, 100, 0.1, 0.3, 0.5, 'C'],
               [100, 100, 80, 0.3, 0.3, 0.5, 'C'],
               [100, 100, 120, 0.3, 0.3, 0.5, 'C'],
               [100, 100, 100, 0.5, 0.5, 0.5, 'C']
               ]
    for i in range(len(tests_b)):
        geo_basket = geo.geometric_basket_option(S1=tests_b[i][0], S2=tests_b[i][1], sigma1=tests_b[i][3], \
                                                 sigma2=tests_b[i][4], rho=tests_b[i][5], r=r, T=T, K=tests_b[i][2], \
                                                 option_type=tests_b[i][6])
        tests_b[i].append(geo_basket)
        a, b, c = basket_mc.arithmatic_basket_option(S1=tests_b[i][0], S2=tests_b[i][1], sigma1=tests_b[i][3], \
                                                    sigma2=tests_b[i][4], rho=tests_b[i][5], r=r, T=T, K=tests_b[i][2], \
                                                    option_type=tests_b[i][6], m=m, control_method='geo')
        tests_b[i].extend([a, b, c])
        a, b, c = basket_mc.arithmatic_basket_option(S1=tests_b[i][0], S2=tests_b[i][1], sigma1=tests_b[i][3], \
                                                     sigma2=tests_b[i][4], rho=tests_b[i][5], r=r, T=T, K=tests_b[i][2], \
                                                     option_type=tests_b[i][6], m=m, control_method='arith')
        tests_b[i].extend([a, b, c])
        a, b, c = basket_mc.arithmatic_basket_option(S1=tests_b[i][0], S2=tests_b[i][1], sigma1=tests_b[i][3], \
                                                     sigma2=tests_b[i][4], rho=tests_b[i][5], r=r, T=T, K=tests_b[i][2], \
                                                     option_type=tests_b[i][6], m=m, control_method='control')
        tests_b[i].extend([a, b, c])
    df_b = pd.DataFrame(tests_b, columns=['S1', 'S2', 'K', 'sigma1', 'sigma2', 'rho', 'Type', 'geo_closed_form', \
                                        'geo_mc', 'geo_mc_l', 'geo_mc_u', 'arith_mc', 'arith_mc_l', 'arith_mc_u', \
                                        'mc_control', 'mc_control_l', 'mc_control_u'])
    print(tests_b)
    print(df_b)
    df_b.to_csv('./tests_basket.csv', index=False)

    '''
    -------------------------------Test 1: Asian Options - -------------------------------------
    columns=['sigma', 'K', 'n', 'Type', 'geo_closed_form', 'geo_mc', 'geo_mc_l', 'geo_mc_u', \
                                      'arith_mc', 'arith_mc_l', 'arith_mc_u', 'mc_control', 'mc_control_l', 'mc_control_u']
    records：
    [[0.3, 100, 50, 'P', 8.482704544877818, 8.45550392227, 8.382504455474422, 8.528503389065577, 7.774850425460677,
      7.7060821311611285, 7.843618719760226, 7.800471015641943, 7.795174989585794, 7.8057670416980915],
     [0.3, 100, 100, 'P', 8.431080155681661, 8.409039990736861, 8.33646869572247, 8.481611285751253, 7.7309328047267565,
      7.6625920708046, 7.799273538648913, 7.7516855768047925, 7.746413759840922, 7.756957393768663],
     [0.4, 100, 50, 'P', 12.558769439656011, 12.530429022617374, 12.434014633241969, 12.62684341199278,
      11.254024831910035, 11.164471020321196, 11.343578643498875, 11.280335041430384, 11.271250061006903,
      11.289420021853864],
     [0.3, 100, 50, 'C', 13.25912613053641, 13.179635773323023, 13.050577069887023, 13.308694476759023,
      14.645573116415973, 14.502180745793348, 14.788965487038597, 14.734005230707591, 14.718558346460178,
      14.749452114955005],
     [0.3, 100, 100, 'C', 13.138779114392923, 13.060809635373976, 12.933089032343704, 13.18853023840425,
      14.517838002212352, 14.375915343945142, 14.659760660479563, 14.604595930616458, 14.589508339037142,
      14.619683522195775],
     [0.4, 100, 50, 'C', 15.759819776409655, 15.648762304253804, 15.475271278178633, 15.822253330328975,
      18.090163991878757, 17.88867361538067, 18.291654368376843, 18.21950502630185, 18.189159365061954,
      18.249850687541745]]
     
    -------------------------------Test 2: Basket Options - -------------------------------------
    columns=['S1', 'S2', 'K', 'sigma1', 'sigma2', 'rho', 'Type', 'geo_closed_form', 
                                        'geo_mc', 'geo_mc_l', 'geo_mc_u', 'arith_mc', 'arith_mc_l', 'arith_mc_u', 
                                        'mc_control', 'mc_control_l', 'mc_control_u']
    records：                                 
    [[100, 100, 100, 0.3, 0.3, 0.5, 'P', 11.491572667960924, 11.464239773481825, 11.366914610049085, 11.561564936914566,
      10.541559563777652, 10.447353441395485, 10.635765686159818, 10.567912783803541, 10.555528218176688,
      10.580297349430394],
     [100, 100, 100, 0.3, 0.3, 0.9, 'P', 12.62235016108495, 12.56750855213676, 12.461837755648459, 12.67317934862506,
      12.374754639180251, 12.269721371306945, 12.479787907053558, 12.429257383710661, 12.42651513000304,
      12.431999637418283],
     [100, 100, 100, 0.1, 0.3, 0.5, 'P', 6.586380620124538, 6.579235744503813, 6.512981322038883, 6.645490166968743,
      5.507727431877001, 5.450672983575462, 5.56478188017854, 5.5138798309132575, 5.5033528383275145,
      5.5244068234990005],
     [100, 100, 80, 0.3, 0.3, 0.5, 'P', 4.711576628546802, 4.697413575285694, 4.639548757827215, 4.755278392744173,
      4.232219809494766, 4.177109484968287, 4.2873301340212455, 4.245649347177925, 4.237632022460483,
      4.253666671895367],
     [100, 100, 120, 0.3, 0.3, 0.5, 'P', 21.289105159772674, 21.26771706890217, 21.13174526581656, 21.40368887198778,
      19.854115607091934, 19.72071305939777, 19.9875181547861, 19.87502316193464, 19.858618334133396,
      19.89142798973588],
     [100, 100, 100, 0.5, 0.5, 0.5, 'P', 23.469148023956826, 23.44792478805258, 23.29808294970819, 23.597766626396968,
      21.045305745801258, 20.89931089642211, 21.191300595180405, 21.06579333238376, 21.03741367155773,
      21.09417299320979],
     [100, 100, 100, 0.3, 0.3, 0.5, 'C', 22.10209279760944, 22.2558719204927, 22.026681260759787, 22.485062580225616,
      24.63294102427794, 24.389412469311115, 24.876469579244766, 24.470038112102895, 24.437634741039208,
      24.50244148316658],
     [100, 100, 100, 0.3, 0.3, 0.9, 'C', 25.87882552643603, 26.11994937956424, 25.84496703597415, 26.39493172315433,
      26.598336128405997, 26.320416994954755, 26.87625526185724, 26.354659798981192, 26.347955184824556,
      26.361364413137828],
     [100, 100, 100, 0.1, 0.3, 0.5, 'C', 17.924736605796905, 17.968420488648064, 17.813211207834595, 18.123629769461534,
      19.48270724590024, 19.3086870701824, 19.65672742161808, 19.433716315487704, 19.409907164061252,
      19.457525466914156],
     [100, 100, 80, 0.3, 0.3, 0.5, 'C', 32.53625628669646, 32.70320525079773, 32.44542165743385, 32.96098884416161,
      35.537760798496215, 35.26658074855905, 35.80894084843338, 35.36262227373489, 35.329457910242425,
      35.39578663722736],
     [100, 100, 120, 0.3, 0.3, 0.5, 'C', 14.685465760920023, 14.845189687411887, 14.648064952298077, 15.042314422525697,
      16.731337539091072, 16.519645915149564, 16.94302916303258, 16.56039776315398, 16.52946755366752,
      16.59132797264044],
     [100, 100, 100, 0.5, 0.5, 0.5, 'C', 28.44938651945445, 28.78775144149877, 28.373146230952546, 29.202356652044994,
      35.26803196955973, 34.791326646557394, 35.744737292562064, 34.88176073358314, 34.7670790278521,
      34.99644243931419]]
    '''